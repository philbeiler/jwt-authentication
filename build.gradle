plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'eclipse'
	id 'checkstyle'
    id 'maven-publish'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	runtimeOnly 'com.mysql:mysql-connector-j'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
	
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.12.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.12.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.12.5'
	
}

tasks.named('test') {
	useJUnitPlatform()
}

checkstyle {
    toolVersion '7.8.1'
    configFile rootProject.file("config/checkstyle/checkstyle.xml")
}

publishing {
    publications {
        customLibrary(MavenPublication) {
            groupId = 'com.baeldung.sample'
            artifactId = 'gradle-maven-converter'
            version = '0.0.1-maven'

            from components.java

            pom {
                name = 'Sample Library'
                description = 'A description of sample library'
                url = 'http://www.example.com/library'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }

            pom.withXml {
                asNode()
                .dependencies
                .dependency
                .findAll { dependency ->
                    // find all dependencies with runtime scope
                    dependency.scope.text() == 'runtime'
                }
                .each { dependency ->
                    // set the scope to 'compile'
                    dependency.scope*.value = 'compile'
                }
            }
        }
    }

    repositories {
        maven {
            name = 'sampleRepo'
            url = layout.buildDirectory.dir("repo")
        }
    }
}
